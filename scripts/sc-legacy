#!/usr/bin/bash
DBNAME=dpd.db
SCRIPT=`basename $0`
DIRNAME=`dirname $0`

node - <<'JS' $DIRNAME $SCRIPT "$@" 
const util = require('util');
const fs = require('fs');
const fsp = fs.promises;
const path = require('path');
const exec = util.promisify(require('child_process').exec);
let [ NODE, DASH, DIRNAME, SCRIPT, ...args] = process.argv;
const MAX_BUFFER = 10 * 1024 * 1024;
const INDEX_PATH = './index.mjs';
const EBT_DATA_PUB = [
  'https://raw.githubusercontent.com/ebt-site/ebt-data',
  'data/refs/heads/published',
].join('/');

const msg = `${SCRIPT}:`;

function help() {
  console.error(`
NAME
  ${SCRIPT} - fetch legacy (HTML) document from SuttaCentral.net

SYNOPSIS
  ${SCRIPT} SUTTA_ID...

ESCRIPTION
  Fetch legacy HTML document from SuttaCentral.net

  -?, --help
    print this help text

  -l, --lang LANG
    two-letter language code (e.g., fr, de)

  -aa, --author-aligned AUTHOR
    SuttaCentral aligned author id (e.g., noeismet)
  
  -al, --author-legacy AUTHOR
    SuttaCentral legacy author id (e.g., wijayaratna)
  
  -mb, --max-buffer MAXBUFFER
    Maximum MB of downloaded content (default: 10)


  -fa, --format-aligned
    Format output as aligned SuttaCentral JSON document.
    You must specify language and may need to specify an 
    for author alignment (i.e., authorAligned).

  -fl, --format-legacy 
    Format output as legacy JSON from SuttaCentra api endpoint.

  -fm, --format-mldoc
    Format output as MLDoc from www.api.sc-voice.net api endpoint.

  -os, --out-stdout
    Send output to stdout

  -od, --out-dir DIR_ROOT
    Send output to directory DIR_ROOT (stdout)

  -v, --verbose
    print more information to stderr

  SUTTA_ID...
    Space-separated list of suttas (e.g., mn8)

EXAMPLES
  ${SCRIPT} -l fr -al wijayaratna -aa noeismet -fl mn8
  ${SCRIPT} -l fr -al wijayaratna -aa noeismet -fa mn8
  ${SCRIPT} -l fr -aa noeismet -fm mn8
  ${SCRIPT} -l fr -fl mn8
`);
  process.exit(0);
}

function parseArgs() {
  const msg = `${SCRIPT}.parseArgs:`;
  // default values
  let dbg = 0;
  let lang;
  let authorLegacy;
  let authorAligned;
  let maxBuffer = MAX_BUFFER;
  let format = 'legacy';
  let outType = 'stdout';
  let outDir = './local';

  let sutta_ids = [];
  for (let i=0; i<args.length; i++) {
    let arg = args[i];
    switch (arg) {
      case '-?':
      case '--help':
        help();
        break;
      case '-mb':
      case '--max-buffer':
        maxBuffer = Number(args[++i])*1024*1024;
        break;
      case '-l':
      case '--lang':
        lang = args[++i];
        break;
      case '-al':
      case '--author-legacy':
        authorLegacy = args[++i];
        break;
      case '-aa':
      case '--author-aligned':
        authorAligned = args[++i];
        break;
      case '-fa':
      case '-format-aligned':
        format = 'aligned';
        break;
      case '-fl':
      case '--format-legacy':
        format = 'legacy';
        break;
      case '-fm':
      case '--format-mldoc':
        format = 'ml-doc';
        break;
      case '-os':
      case '--out-stdout':
        outType = 'stdout';
        break;
      case '-od':
      case '--out-dir':
        outType = 'dir';
        outDir = args[++i];
        break;
      case "--verbose":
      case "-v":
        dbg = 1;
        break;
      case "--very-verbose":
      case "-vv":
        dbg = 2;
        break;
      default:
        if (arg.at(0) === "-") {
          console.error(`${msg} [ERROR] ignoring ${arg}`);
          help();
        } else {
          sutta_ids.push(arg);
        }
        break;
    }
  }
  if (sutta_ids.length < 1) {
    help();
  }
  if (lang == null) {
    throw new Error(`${msg} lang?`);
  }
  if (authorLegacy == null) {
    switch (lang) {
      case 'fr':
        authorLegacy = 'wijayaratna';
        break;
      default:
        throw new Error(`${msg} authorLegacy?`);
    }
  }
  if (authorAligned == null) {
    switch (lang) {
      case 'fr':
        authorAligned = 'noeismet';
        break;
      case 'de':
        authorAligned = 'sabbamitta';
        break;
      default:
        throw new Error(`${msg} authorAligned?`);
    }
  }
  if (format === 'aligned') {
    if (authorAligned == null) {
      throw new Error(`${msg} authorAligned?`);
    }
  }

  let result = {
    dbg,
    sutta_ids,
    lang,
    authorLegacy,
    authorAligned,
    maxBuffer,
    format,
    outDir,
    outType,
  }
  return result;
}
let {
  dbg,
  sutta_ids,
  lang,
  authorLegacy,
  authorAligned,
  maxBuffer,
  format,
  outType,
  outDir,
} = parseArgs();
if (sutta_ids.length===0) {
  help();
}
dbg && console.error(msg, Object.assign({
  NODE,DASH, DIRNAME, SCRIPT, sutta_ids, 
  lang, authorLegacy, authorAligned,
  outType, outDir, maxBuffer,
}));

async function outLegacy(outPath, json) {
  const msg = `${SCRIPT}.outLegacy:`;
  await fs.promises.mkdir(path.dirname(outPath), {recursive:true});
  let output = JSON.stringify(json.translation,null,2);
  await fs.promises.writeFile(outPath, output);
}

async function alignLegacy(json) {
  const msg = `${SCRIPT}.alignLegacy:`;
  let { suttaplex } = json;
  let { uid: sutta_id } = suttaplex;
  const { 
    Aligner,
    Alignment,
    AlignmentStatus,
    BilaraPath,
    EbtDoc,
    LegacyDoc,
    WordSpace,
  } = await import(INDEX_PATH);
  let urlLegacy = [
    'https://suttacentral.net/api/suttas',
    sutta_id,
    `${authorLegacy}?lang=${lang}`,
  ].join('/');
  let res = await fetch(urlLegacy);
  let { ok, status} = res;
  let legacyJson = await res.json();
  let legacyHtml = legacyJson.translation.text;
  console.log(msg, {lang, sutta_id}, wordSpace);
  //let aligner = new Aligner({ lang, wordSpace });
  //let mlDoc = await aligner.fetchMLDoc(sutta_id);
  //let legacyDoc = MN8_LEG_DOC;
  //let wordSpace = WS_MOHAN;
  //let alignment = aligner.createAlignment({ legacyDoc, mlDoc });
  //let ebtDoc = alignment.alignAll();
}

async function main() {
  const msg = `${SCRIPT}.main:`;
  console.log(msg, INDEX_PATH);
  const { Text } = await import(INDEX_PATH);
  const { 
    Aligner,
    Alignment,
    AlignmentStatus,
    BilaraPath,
    EbtDoc,
    LegacyDoc,
    WordSpace,
  } = Text;
  let aligner = new Aligner({
    lang,
    authorLegacy,
    authorAligned,
  });

  for (let i=0; i<sutta_ids.length; i++) {
    let si = sutta_ids[i];
    console.error(msg, si);
    let [ 
      sutta_id, 
      langIgnored,
      author = authorLegacy, 
    ] = si.split('/');
    let url = [
      'https://suttacentral.net/api/suttas',
      sutta_id,
      `${author}?lang=${lang}`,
    ].join('/');
    let cmd = `curl ${url}`;
    console.error(msg, cmd);
    let { error, stdout, stderr } = await exec(cmd, {maxBuffer});
    if (error) {
      throw new Error(`request failed: ${error.message}`);
    }
    console.error(msg, '[1]stdout', stdout.length);
    let json = JSON.parse(stdout);
    let lines = json.translation.text.split('\n');
    json.translation.text = lines;
    let output;
    switch (format) {
      case 'aligned':
        output = alignLegacy(json);
        break;
      case 'ml-doc':
        output = await aligner.fetchMLDoc(sutta_id);
        break;
      case 'legacy': 
      default:
        output = json;
        break;
    }
    switch (outType) {
      case 'dir': {
        switch (format) {
          case 'ml-doc': {
            let outFile = `${sutta_id}-${lang}-${authorAligned}.mld.json`;
            let outPath = path.join(outDir||'.', outFile);
            let text = JSON.stringify(output, null, 2);
            await fsp.writeFile(outPath, text);
            console.error(msg, `[1]${outPath}`, text.length);
          } break;
          case 'legacy':
          case 'aligned':
          default: {
            let bp = BilaraPath.legacyPath(sutta_id, lang, authorLegacy);
            let outPath = path.join(outDir||`local/${SCRIPT}`, bp);
            fs.mkdirSync(outPath, {recursive:true});
            outLegacy(outPath, output);
          } break;
        }
      } break;
      case 'stdout':
      default:
        console.log(JSON.stringify(output, null, 2));
        break;
    } break;
  }
}

(async function() {
  try {
    await main();
  } catch(e) {
    console.error(msg, e);
  }
})()

JS
